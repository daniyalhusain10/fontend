import React, { useContext, useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import ShopContext from "../api/ShopContext.jsx";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";
import Button from './Button.jsx'
// Register ScrollTrigger plugin
gsap.registerPlugin(ScrollTrigger);

// --- CONSTANTS ---
const CARD_WIDTH = 320;
const CARD_MARGIN = 20;
const CONTAINER_PADDING = 24;
const LARGE_SCREEN_BREAKPOINT = 1024; // Tailwind's 'lg'

const ElasticCarousel = () => {
Â 
Â  const { products } = useContext(ShopContext);

Â  const carouselRef = useRef(null);
Â  const scrollTriggerRef = useRef(null);
Â  const cardContainerRef = useRef(null);
Â  
Â  const [containerWidth, setContainerWidth] = useState(0);
Â  const [isLargeScreen, setIsLargeScreen] = useState(false);

Â  // --- Derived state / calculations ---
Â  const womensProducts = products.filter((p) =>
Â  Â  typeof p.category === "string"
Â  Â  Â  ? ["women", "womens"].includes(p.category.toLowerCase().trim())
Â  Â  Â  : false
Â  );
Â  const cardCount = womensProducts.length;
Â  const contentWidth = cardCount * CARD_WIDTH + Math.max(0, cardCount - 1) * CARD_MARGIN;
Â  const visibleWidth = containerWidth - 2 * CONTAINER_PADDING;
Â  const isScrollable = contentWidth > visibleWidth;
Â  const isFramerDragActive = !isLargeScreen && isScrollable;
Â  const scrollDistance = contentWidth - visibleWidth;
Â  
Â  // --- 1. Handle resize and screen size ---
Â  useEffect(() => {
Â  Â  const handleResize = () => {
Â  Â  Â  setContainerWidth(carouselRef.current?.offsetWidth || 0);
Â  Â  Â  setIsLargeScreen(window.innerWidth >= LARGE_SCREEN_BREAKPOINT);
Â  Â  };
Â  Â  handleResize();
Â  Â  window.addEventListener("resize", handleResize);
Â  Â  return () => window.removeEventListener("resize", handleResize);
Â  }, []);

Â  // --- 2. GSAP horizontal scroll (Always called, logic runs conditionally) ---
useGSAP(() => {
  const container = cardContainerRef.current;
  const cards = container ? container.children : [];

  if (!isLargeScreen || !isScrollable) {
    if (container) gsap.set(container, { x: 0 });
    if (cards.length > 0) gsap.set(cards, { opacity: 1, y: 0 });
    ScrollTrigger.getAll().forEach(st => st.kill());
    return;
  }

  // Fade-in cards
  if (cards.length > 0) {
    gsap.from(cards, {
      opacity: 0,
      y: 50,
      duration: 0.8,
      stagger: 0.15,
      delay: 0.5,
    });
  }

  // Horizontal Scroll
  gsap.to(container, {
    x: -scrollDistance,
    ease: "none",
    scrollTrigger: {
      trigger: scrollTriggerRef.current,
      pin: true,
      start: "top top",
      end: `+=${scrollDistance}`,
      scrub: 1.2,
      invalidateOnRefresh: true,
      onRefresh: self => {
        // force remeasurement of height
        const section = scrollTriggerRef.current;
        if (section) {
          section.style.height = `calc(30vh + ${scrollDistance}px)`;
        }
      },
    },
  });

  // ðŸ’¡ Force ScrollTrigger refresh after a tick
  setTimeout(() => {
    ScrollTrigger.refresh();
  }, 300);

}, { scope: scrollTriggerRef, dependencies: [containerWidth, cardCount, isLargeScreen] });

Â  // --- Conditional Render (FINE) ---
Â  if (cardCount === 0)
Â  Â  return (
Â  Â  Â  <section className="text-black py-12 px-6 min-h-screen">
Â  Â  Â  Â  <p className="text-center text-gray-500">Loading products...</p>
Â  Â  Â  </section>
Â  Â  );

Â  // Framer Motion Drag Constraints
Â  const dragConstraints = {
Â  Â  left: -Math.max(scrollDistance, 0),
Â  Â  right: 0,
Â  };

Â  return (
Â  Â  <section className="text-black px-6 ">
Â  Â  Â  <div
Â  Â  Â  Â  ref={scrollTriggerRef}
Â  Â  Â  Â  className="w-full overflow-hidden"
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  // Height calculated for GSAP pinning
Â  Â  Â  Â  Â  height: isLargeScreen && isScrollable
Â  Â  Â  Â  Â  Â  Â  ? `calc(30vh + ${scrollDistance}px)`
Â  Â  Â  Â  Â  Â  Â  : "auto",
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <div ref={carouselRef} className="w-full overflow-hidden select-none">
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  ref={cardContainerRef}
Â  Â  Â  Â  Â  Â  className="flex py-4 gap-[20px]"
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Drag is active ONLY when Framer Motion is the controller
Â  Â  Â  Â  Â  Â  drag={isFramerDragActive ? "x" : false}
Â  Â  Â  Â  Â  Â  dragConstraints={dragConstraints}
Â  Â  Â  Â  Â  Â  dragElastic={0.15}
Â  Â  Â  Â  Â  Â  dragTransition={{ power: 0.15, bounceStiffness: 100, bounceDamping: 10 }}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Cursor logic based on Framer Drag Active
Â  Â  Â  Â  Â  Â  whileDrag={{ cursor: isFramerDragActive ? "grabbing" : "default" }}
Â  Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  Â  cursor: isFramerDragActive ? "grab" : "default"
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {womensProducts.map((product) => (
Â  Â  Â  Â  Â  Â  Â  <DraggableCard key={product._id} product={product} />
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </section>
Â  );
};

// ðŸ”¹ Card component
const DraggableCard = ({ product }) => {
Â  const [currentIndex, setCurrentIndex] = useState(0);
Â  const [hovered, setHovered] = useState(false);
Â  const intervalRef = useRef(null);
Â  const navigate = useNavigate();
Â  const pointerDownRef = useRef({ x: 0, y: 0 });

Â  const images =
Â  Â  Array.isArray(product.images) && product.images.length > 0
Â  Â  Â  ? product.images.map((img) => img.url || img)
Â  Â  Â  : [product.imageUrl || "https://placehold.co/600x600/cccccc/333333?text=No+Image"];

Â  useEffect(() => {
Â  Â  if (hovered && images.length > 1) {
Â  Â  Â  intervalRef.current = setInterval(() => {
Â  Â  Â  Â  setCurrentIndex((prev) => (prev + 1) % images.length);
Â  Â  Â  }, 700);
Â  Â  } else {
Â  Â  Â  clearInterval(intervalRef.current);
Â  Â  Â  setCurrentIndex(0);
Â  Â  }
Â  Â  return () => clearInterval(intervalRef.current);
Â  }, [hovered, images.length]);

Â  const handlePointerDown = (e) => {
Â  Â  pointerDownRef.current = { x: e.clientX, y: e.clientY };
Â  };

Â  const handlePointerUp = (e) => {
Â  Â  const dx = Math.abs(e.clientX - pointerDownRef.current.x);
Â  Â  const dy = Math.abs(e.clientY - pointerDownRef.current.y);
Â  Â  if (dx < 5 && dy < 5) {
Â  Â  Â  navigate(`/product/${product._id}`);
Â  Â  }
Â  };

Â  return (
Â  Â  <div
Â  Â  Â  className="flex-shrink-0 w-[320px]"
Â  Â  Â  onPointerDown={handlePointerDown}
Â  Â  Â  onPointerUp={handlePointerUp}
Â  Â  >
Â  Â  Â  <motion.div
Â  Â  Â  Â  className="flex flex-col shadow-lg overflow-hidden "
Â  Â  Â  Â  onMouseEnter={() => setHovered(true)}
Â  Â  Â  Â  onMouseLeave={() => setHovered(false)}
Â  Â  Â  Â  whileHover={{ y: -5 }}
Â  Â  Â  Â  transition={{ type: "spring", stiffness: 300 }}
Â  Â  Â  >
Â  Â  Â  Â  {/* ðŸ”¥ FIX 1: Image Drag now works */}
Â  Â  Â  Â  <div className="relative w-full h-96 overflow-hidden">
Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  src={images[currentIndex]}
Â  Â  Â  Â  Â  Â  alt={product.name}
Â  Â  Â  Â  Â  Â  loading="lazy"
Â  Â  Â  Â  Â  Â  decoding="async"
Â  Â  Â  Â  Â  Â  // Prevents browser's default image drag behavior
Â  Â  Â  Â  Â  Â  draggable="false" 
Â  Â  Â  Â  Â  Â  className={`w-full h-full object-cover object-top transition-transform duration-500 ${
Â  Â  Â  Â  Â  Â  Â  hovered ? "scale-110" : "scale-100"
Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  onError={(e) => {
Â  Â  Â  Â  Â  Â  Â  e.target.onerror = null;
Â  Â  Â  Â  Â  Â  Â  e.target.src = "https://placehold.co/600x600/cccccc/333333?text=No+Image";
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="mt-4 text-left p-4">
Â  Â  Â  Â  Â  <h3 className="text-md tracking-tighter text-black uppercase">{product.name}</h3>
Â  Â  Â  Â  Â  <p className="text-xl tracking-tighter font-bold text-black mt-1">
Â  Â  Â  Â  Â  Â  PKR {product.price}.00
Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  {product.sizes?.length > 0 ? (
Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-2 mt-3">
Â  Â  Â  Â  Â  Â  Â  {product.sizes.map((size) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={size}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-3 py-1 uppercase text-sm font-medium bg-gray-200 text-gray-800 rounded cursor-default"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {size}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <p className="text-gray-400 text-sm mt-2">No size options</p>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  <div className="mt-4">
Â  Â  Â  Â  Â  Â <Button text={"product.."} />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </motion.div>
Â  Â  </div>
Â  );
};

export default ElasticCarousel;
